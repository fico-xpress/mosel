(!******************************************************
  file myqxprstest1.mos
  `````````````````````
  Testing myqxprs:
  * continuous problem solving and solution retrieval
    
  author: S.Heipcke, Apr. 2018, rev. Nov. 2022

  (c) Copyright 2018 Fair Isaac Corporation
  
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*******************************************************!) 
model "Problem solving and solution retrieval"
  uses "myqxprs"                       ! Load the solver module
  options keepassert
  version 0.2.0

  declarations
    RN = 1..5                          ! Set of points
    CX,CY: array(RN) of real           ! Target location for each point
    x,y: array(RN) of mpvar            ! Decision variables
   end-declarations

  CX::[-5,5,5,-5,1]; CY::[5,5,-5,-5,0]

 ! Set bounds on variables
  forall(i in RN) do
    -10<=x(i); x(i)<=10
    -10<=y(i); y(i)<=10
  end-do

 ! Objective: minimise the total squared distance between all points
  TotDist:= sum(i,j in RN | i<j) ((x(i)-x(j))^2+(y(i)-y(j))^2)

 ! Constraints: all points within given distance of their target location
  forall(i in RN) 
    LimDist(i):= (x(i)-CX(i))^2+(y(i)-CY(i))^2 <= 1

 ! Setting solver parameters
  setparam("myxp_verbose", true)       ! Display solver log
  setparam("myxp_timelimit", 10)       ! Set a time limit
  assert(getparam("myxp_timelimit")= 10, "Incorrect control parameter value")

 ! Solve the problem (includes matrix generation) 
  minimize(TotDist)

 ! Retrieve a solver parameter
  writeln("Solver status: ", getparam("myxp_lpstatus"))
  assert(getparam("myxp_lpstatus")=MYXP_LP_OPTIMAL, "Wrong LP status")
  assert(getprobstat=MYXP_OPT, "LP not optimal")
 ! Access solution information
  if getprobstat = MYXP_OPT then
    writeln("Solution: ", getobjval) 
    assert(round(getobjval)=737)
    forall(i in RN) writeln(i, ": ", getsol(x(i)), ", ", getsol(y(i)))
  else
    writeln("No solution found")
  end-if

 ! Re-solve with another (linear) objective
  LinObj:= sum(i in RN) if(CX(i)<0, -1, 1)*x(i)
  minimize(LinObj)
  assert(getprobstat=MYXP_OPT, "Problem 2 not optimal")
  if getprobstat = MYXP_OPT then
    writeln("Solution: ", getobjval)    
    assert(round(getobjval)=16)
    forall(i in RN) writeln(i, ": ", getsol(x(i)), ", ", getsol(y(i)))
  else
    writeln("No solution found")
  end-if
end-model
