(!******************************************************
  Copy of file math_test.mos
  ``````````````````````````
  Testing the functionality defined by module 'math'. 
  
  This copy of the actual test file has added 'moseltest' tags
  showing how to build a DSO file during the testing process
  (running this test example will only be possible if a C compiler 
  is present and found by the 'moseltest' program.)
   
  author: Y. Colombani, S. Heipcke, June 2016, rev. Apr 2018

  (c) Copyright 2018 Fair Isaac Corporation

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
 
       http://www.apache.org/licenses/LICENSE-2.0
 
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*******************************************************!)

!*! build math.dso
!*! outexpect All okay.

model "testing math"
  options keepassert
  uses "math"

  writeln("Testing math.dso")

  y:=tan(-M_PI/4)
  assert(y=-1, "Incorrect result for tan (-1): "+y)
  y:=tan(M_PI)
  assert(y=0, "Incorrect result for tan (0): "+y)

  y:=arcsin(0)
  assert(y=0, "Incorrect result for arcsin (0): "+y)
  y:=sin(arcsin(0.5))
  assert(y=0.5, "Incorrect result for arcsin (0.5): "+y)

  y:=arccos(0)
  assert(y=M_PI/2, "Incorrect result for arccos (0): "+y)
  y:=cos(arccos(0.5))
  assert(y=0.5, "Incorrect result for arccos (0.5): "+y)

  y:=arctan2(0,1)
  assert(y=0, "Incorrect result for arctan2 (0): "+y)

  y:=cosh(0)
  assert(y=1, "Incorrect result for cosh (1): "+y)
  assert(cosh(-0.5)=cosh(0.5), "Incorrect result for cosh (=)")

  y:=sinh(0)
  assert(y=0, "Incorrect result for sinh (0): "+y)
  y:=cosh(2)^2-sinh(2)^2
  assert(y=1, "Incorrect result for sinh^2 (1): "+y)

  y:=tanh(0)
  assert(y=0, "Incorrect result for tanh (0): "+y)
  assert(tanh(-0.5)=-tanh(0.5), "Incorrect result for tanh (=)")

  y:=arcsinh(0)
  assert(y=0, "Incorrect result for arcsinh (0): "+y)
  y:=arccosh(1)
  assert(y=0, "Incorrect result for arccosh (0): "+y)
  y:=arctanh(0)
  assert(y=0, "Incorrect result for arctanh (0): "+y)

  y:=hypot(3,4)
  assert(y=5, "Incorrect result for hypot (5): "+y)
  assert(hypot(-2,-2.5)=hypot(2,2.5), "Incorrect result for hypot (=)")

  declarations
   L: list of integer
  end-declarations 

  y:=frexp(5,L)
  assert(y=5/8, "Incorrect result for frexp (0.625): "+y)
  assert(L.first=3, "Incorrect result for frexp (3): "+L.first)

  y:=ldexp(-5.5,2)
  assert(y=-22, "Incorrect result for frexp (-22): "+y)

  y:=logb(7)
  assert(y=2, "Incorrect result for logb (2): "+y)
  y:=logb(-7)
  assert(y=2, "Incorrect result for logb (2): "+y)

  y:=log1p(1)
  assert(y=M_LN2, "Incorrect result for log1p (0.69...): "+y)

  y:=cbrt(-27)
  assert(y=-3, "Incorrect result for cbrt (-3): "+y)

  y:=copysign(-4.5, 2.3)
  assert(y>0, "Incorrect result for copysign (>0): "+y)
  assert(y=4.5, "Incorrect result for copysign (4.5): "+y)
  y:=copysign(-4.5, -2.3)
  assert(y<0, "Incorrect result for copysign (<0): "+y)

  deftol:=getparam("ZEROTOL")
  setparam("ZEROTOL", 10E-20)
  y:=nextafter(1/3, 5)
  assert(y>=1/3, "Incorrect result for nextafter (>1/3): "+y)
  y:=nextafter(1/3, -5)
  assert(y<=1/3, "Incorrect result for nextafter (<1/3): "+y)
  y:=nextup(-1/3)
  assert(y>=-1/3, "Incorrect result for nextup (>-1/3): "+y)

  y:=rint(-0.5-1*10E-15)
  assert(y=-1.0, "Incorrect result for rint (-1): "+y)
  y:=rint(-0.5+1*10E-15)
  assert(y=0, "Incorrect result for rint (0): "+y)
  setparam("ZEROTOL", deftol)

  y:=scalb(0.5, 5)
  assert(y=16, "Incorrect result for scalb (16): "+y)
  y:=scalb(12, -2)
  assert(y=3, "Incorrect result for scalb (3): "+y)

  y:=sign(-2.5)
  assert(y=-1, "Incorrect result for sign (-1): "+y)
  a:=sign(-2)
  assert(a=-1, "Incorrect result for sign (-1): "+a)

  y:=todeg(M_PI)
  assert(y=180, "Incorrect result for todeg (180): "+y)
  y:=torad(90)
  assert(y=M_PI_2, "Incorrect result for torad (1.57...): "+y)

  y:=round2d(-2.755)
  assert(y=-2.76, "Incorrect result for round2d (-2.76): "+y)
  y:=round2d(2.755)
  assert(y=2.76, "Incorrect result for round2d (2.76): "+y)
  y:=roundnd(-2.987654321,4)
  assert(y=-2.9877, "Incorrect result for roundnd (-2.9877): "+y)
  y:=roundnd(2.987654321,3)
  assert(y=2.988, "Incorrect result for roundnd (2.988): "+y)

  writeln("All okay.")
end-model
